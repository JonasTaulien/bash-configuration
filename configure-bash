#!/usr/bin/env bash
#################### Create function to calculate absolute path of parent directory of a file
# We can't create a function file for this because for sourcing function files we need no be able
# to calculate the path to them.
alias jr_doc_funct_get_absolute_path_of_parent_directory="echo \"
##########
# Calculates the absolute path of the parent directory of the given path.
# If the given path is relative, it is assumed, that it is relative to the current working directory
# Example: Get base-path of current script: \\\$(jr_funct_get_absolute_path_of_parent_directory \\\"\\\${BASH_SOURCE[0]}\\\")
#
# @param1 A (maybe relative) path to a file or directory
# @stdout Absolute path of the parent directory of the file or directory
##########\""
jr_funct_get_absolute_path_of_parent_directory(){
    local path="${1}"
    echo -n "$(cd "$(dirname "${path}")" && pwd)"
}
export -f jr_funct_get_absolute_path_of_parent_directory



#################### Calculate parent directory of this file
pathnameOfCurrentlyExecutingScript=${BASH_SOURCE[0]}
bashConfigurationRoot="$(jr_funct_get_absolute_path_of_parent_directory "${pathnameOfCurrentlyExecutingScript}")"



#################### Source base functions
source "${bashConfigurationRoot}/function/file_contains.sh"
source "${bashConfigurationRoot}/function/copy_file_idempotent.sh"
source "${bashConfigurationRoot}/function/append_idempotent.sh"
source "${bashConfigurationRoot}/function/add_sourcing_of_file_to_other_file_idempotent.sh"
source "${bashConfigurationRoot}/function/get_operating_system.sh"
source "${bashConfigurationRoot}/function/is_bash_version_at_least.sh"



#################### Variable setup
# Create variables file if not present
if jr_funct_copy_file_idempotent "${bashConfigurationRoot}/default-variables.sh" "${bashConfigurationRoot}/variables.sh"; then
    echo "TODO: Created ${bashConfigurationRoot}/variables please override them and execute resource_bashrc"
fi



#################### Source variables
source "${bashConfigurationRoot}/default-variables.sh"
source "${bashConfigurationRoot}/variables.sh"



#################### Idempotent setup
# Add sourcing of ~/.bashrc to ~/.bash_profile
if jr_funct_add_sourcing_of_file_to_other_file_idempotent ~/.bashrc ~/.bash_profile; then
    echo "Added sourcing of ~/.bashrc to ~/.bash_profile"
fi

# Add sourcing of itself to ~/.bashrc
pathToConfigureBash="${bashConfigurationRoot}/configure-bash"
if jr_funct_add_sourcing_of_file_to_other_file_idempotent "${pathToConfigureBash}" ~/.bashrc; then
    echo "Added sourcing of myself (${pathToConfigureBash}) to ~/.bashrc"
fi

# Install curl
case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_debian}") which curl > /dev/null || sudo apt-get install -qq curl ;;
esac

# Install brew if macOs
case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_macos}") which brew > /dev/null || /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" ;;
esac

# Install jq
if ! which jq > /dev/null; then
    case $(jr_funct_get_operating_system) in
        "${jr_const_operating_system_debian}") sudo apt-get install -qq jq ;;
        "${jr_const_operating_system_macos}") brew install jq > /dev/null ;;
    esac
fi

# Upgrade bash
if ! jr_funct_is_bash_version_at_least 4 1 0; then
    case $(jr_funct_get_operating_system) in
        "${jr_const_operating_system_macos}")
            brew install bash
            echo 'Please insert password for appending /usr/local/bin/bash to /etc/shells:'
            echo /usr/local/bin/bash | sudo tee -a /etc/shells
            chsh -s /usr/local/bin/bash
            echo 'ATTENTION: Please set /usr/local/bin/bash as default shell in IntelliJ IDEA and Terminal!'
            ;;
        *) echo 'ATTENTION: Bash is outdated please install newest version!'
    esac
fi

# Configure git
git config --global user.name "${jr_var_git_name}"
git config --global user.email "${jr_var_email}"
git config --global push.default upstream
git config --global pull.rebase false

# Setup ssh-key if not existent
if [ ! -f ~/.ssh/id_rsa ]; then
    echo "No private key setup. Generating one..."
    ssh-keygen -q -t rsa -b 4096 -C "${jr_var_email}" -f ~/.ssh/id_rsa -N ''
fi

# Install git via homebrew
case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_macos}")
        brew ls --versions 'git' > /dev/null || brew install 'git'
        ;;
esac

# Install bash-completion
case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_macos}")
        brew ls --versions 'bash-completion@2' > /dev/null || brew install 'bash-completion@2'
        brew ls --versions 'docker-completion' > /dev/null || brew install 'docker-completion'
        brew ls --versions 'docker-compose-completion' > /dev/null || brew install 'docker-compose-completion'
        brew ls --versions 'maven-completion' > /dev/null || brew install 'maven-completion'
        brew ls --versions 'open-completion' > /dev/null || brew install 'open-completion'

        source "$(brew --prefix bash-completion@2)/etc/profile.d/bash_completion.sh"
        source "$(brew --prefix git)/etc/bash_completion.d/git-completion.bash"
        ;;
esac

# Activate sensible-bash
source "${bashConfigurationRoot}/sensible-bash_0.2.3.sh"



#################### Source functions
source "${bashConfigurationRoot}/function/tar_create.sh"
source "${bashConfigurationRoot}/function/list_files_containing.sh"
source "${bashConfigurationRoot}/function/translate.sh"
source "${bashConfigurationRoot}/function/git_create_branch.sh"
source "${bashConfigurationRoot}/function/git_rename_branch_also_on_remote.sh"
source "${bashConfigurationRoot}/function/git_undo_last_commit.sh"
source "${bashConfigurationRoot}/function/git_get_current_branch.sh"
source "${bashConfigurationRoot}/function/git_rename_current_branch_also_on_remote.sh"
source "${bashConfigurationRoot}/function/git_delete_branch_locally.sh"
source "${bashConfigurationRoot}/function/git_delete_branch_on_remote.sh"
source "${bashConfigurationRoot}/function/git_delete_branch_also_on_remote.sh"
source "${bashConfigurationRoot}/function/git_delete_remotly_deleted_branches.sh"
source "${bashConfigurationRoot}/function/git_delete_tag_also_on_remote.sh"
source "${bashConfigurationRoot}/function/count_objects_in_current_directory.sh"
source "${bashConfigurationRoot}/function/check_password_breach.sh"

case $(jr_funct_get_operating_system) in
    "${jr_const_operating_system_macos}")
        source "${bashConfigurationRoot}/function/macos_pdf_concat.sh"
        alias jr_funct_pdf_concat='jr_funct_macos_pdf_concat'
        ;;
esac



#################### Source shortcuts
source "${bashConfigurationRoot}/shortcuts.sh"



#################### Source prompt
source "${bashConfigurationRoot}/prompt.sh"

##### Enable extended globbing
shopt -s extglob

##### Set language to english
export LANG=en_US.UTF-8

##### Set java Version
export JAVA_HOME=$(/usr/libexec/java_home -v 16)
